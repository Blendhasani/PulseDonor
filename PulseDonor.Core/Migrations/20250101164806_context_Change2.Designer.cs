// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PulseDonor.Infrastructure.Models;

#nullable disable

namespace PulseDonor.Infrastructure.Migrations
{
    [DbContext(typeof(DevPulsedonorContext))]
    [Migration("20250101164806_context_Change2")]
    partial class context_Change2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.BloodDonationPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertedFrom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedFrom")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("BloodDonationPoint", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.BloodRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DonationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("DonationTime")
                        .HasColumnType("time");

                    b.Property<string>("DonorId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertedFrom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedFrom")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PostKey")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UrgenceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("DonorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UrgenceTypeId");

                    b.ToTable("BloodRequest", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.BloodRequestApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BloodRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertedFrom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedFrom")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("BloodRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("BloodRequestApplication", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.BloodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("BloodType", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertedFrom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedFrom")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertedFrom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedFrom")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupMember", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.GroupMemberJoinCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiracyDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertedFrom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedFrom")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupMemberJoinCode", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hospital", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.NotificationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_AspNetRoles");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_AspNetRoleClaims");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.SuccessStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertedFrom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedFrom")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("SuccessStory", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.SuccessStoryFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertedFrom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedFrom")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("SuccessStoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuccessStoryId");

                    b.ToTable("SuccessStoryFile", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.UrgenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("UrgenceType", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEligible")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool?>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_AspNetUser");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("GenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.UserCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertedFrom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedFrom")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCity", (string)null);
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_AspNetUserClaims");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PK_AspNetUserLogins");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_AspNetUserRoles");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.BloodRequest", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.User", "Author")
                        .WithMany("BloodRequestAuthors")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_BloodRequest_AspNetUsers");

                    b.HasOne("PulseDonor.Infrastructure.Models.BloodType", "BloodType")
                        .WithMany("BloodRequests")
                        .HasForeignKey("BloodTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_BloodRequest_BloodType");

                    b.HasOne("PulseDonor.Infrastructure.Models.User", "Donor")
                        .WithMany("BloodRequestDonors")
                        .HasForeignKey("DonorId")
                        .HasConstraintName("FK_BloodRequest_AspNetUsers1");

                    b.HasOne("PulseDonor.Infrastructure.Models.Hospital", "Hospital")
                        .WithMany("BloodRequests")
                        .HasForeignKey("HospitalId")
                        .HasConstraintName("FK_BloodRequest_Hospital");

                    b.HasOne("PulseDonor.Infrastructure.Models.UrgenceType", "UrgenceType")
                        .WithMany("BloodRequests")
                        .HasForeignKey("UrgenceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_BloodRequest_UrgenceType");

                    b.Navigation("Author");

                    b.Navigation("BloodType");

                    b.Navigation("Donor");

                    b.Navigation("Hospital");

                    b.Navigation("UrgenceType");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.BloodRequestApplication", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.BloodRequest", "BloodRequest")
                        .WithMany("BloodRequestApplications")
                        .HasForeignKey("BloodRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_BloodRequestApplication_BloodRequest");

                    b.HasOne("PulseDonor.Infrastructure.Models.User", "User")
                        .WithMany("BloodRequestApplications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_BloodRequestApplication_AspNetUsers");

                    b.Navigation("BloodRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Group", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.City", "City")
                        .WithMany("Groups")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Group_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.GroupMember", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMember_Group");

                    b.HasOne("PulseDonor.Infrastructure.Models.User", "Member")
                        .WithMany("GroupMembers")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMember_AspNetUsers");

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.GroupMemberJoinCode", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.Group", "Group")
                        .WithMany("GroupMemberJoinCodes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMemberJoinCode_Group");

                    b.HasOne("PulseDonor.Infrastructure.Models.User", "Member")
                        .WithMany("GroupMemberJoinCodes")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMemberJoinCode_AspNetUsers");

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Hospital", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.City", "City")
                        .WithMany("Hospitals")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Hospital_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Notification", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired();

                    b.HasOne("PulseDonor.Infrastructure.Models.User", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_AspNetUsers");

                    b.Navigation("NotificationType");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.NotificationUser", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationId")
                        .IsRequired();

                    b.HasOne("PulseDonor.Infrastructure.Models.User", "User")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationUsers_AspNetUsers_UserId");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.RoleClaim", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.SuccessStoryFile", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.SuccessStory", "SuccessStory")
                        .WithMany("SuccessStoryFiles")
                        .HasForeignKey("SuccessStoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SuccessStoryFile_SuccessStory");

                    b.Navigation("SuccessStory");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.User", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.BloodType", "BloodType")
                        .WithMany("Users")
                        .HasForeignKey("BloodTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUsers_BloodType");

                    b.HasOne("PulseDonor.Infrastructure.Models.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUsers_Gender");

                    b.Navigation("BloodType");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.UserCity", b =>
                {
                    b.HasOne("PulseDonor.Infrastructure.Models.City", "City")
                        .WithMany("UserCities")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_UserCity_City");

                    b.HasOne("PulseDonor.Infrastructure.Models.User", "User")
                        .WithMany("UserCities")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserCity_AspNetUsers");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.BloodRequest", b =>
                {
                    b.Navigation("BloodRequestApplications");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.BloodType", b =>
                {
                    b.Navigation("BloodRequests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.City", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Hospitals");

                    b.Navigation("UserCities");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Group", b =>
                {
                    b.Navigation("GroupMemberJoinCodes");

                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Hospital", b =>
                {
                    b.Navigation("BloodRequests");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.Role", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.SuccessStory", b =>
                {
                    b.Navigation("SuccessStoryFiles");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.UrgenceType", b =>
                {
                    b.Navigation("BloodRequests");
                });

            modelBuilder.Entity("PulseDonor.Infrastructure.Models.User", b =>
                {
                    b.Navigation("BloodRequestApplications");

                    b.Navigation("BloodRequestAuthors");

                    b.Navigation("BloodRequestDonors");

                    b.Navigation("GroupMemberJoinCodes");

                    b.Navigation("GroupMembers");

                    b.Navigation("NotificationUsers");

                    b.Navigation("Notifications");

                    b.Navigation("UserCities");
                });
#pragma warning restore 612, 618
        }
    }
}
